

% This code models the tunnelling process of a wavefunction by solving the
% 1d TDSE using the Crank-Nicholson numerical method. 
% The code allows the modelling of 3 barrier types:
% Square, Gaussain, and Coulomb shaped potential barriers. 
% Depending on which barrier is commented.
% The barrier thickness can be chaged but needs to be manually updated.

% Date: 22/01/2023

clear;
close all;

% ========================================================================
% INPUTS
% ========================================================================

Nx = 2001;         % [1001]   must be an odd number - number of grid points
Nt = 20000;       % [10000]  number of time steps

nStep = 500;

me = 9.10938291e-31;    % electron mass
hbar = 1.054571726e-34; % hbar Planck's constant
e = 1.602176565e-19;    % elementary charge
ep0 = 8.8541878128e-12; % permittivity of free space

% Initialise the pulse
L = 64e-9;                 % [ 4e-9]   length
nx0 = round(Nx/4);     % pulse centre   round(Nx/4)
wL = 1.6e-10;             % pulse wavelength   L/40
s = L/25;              % pulse width        L/25
k = (2*pi)/wL;

% Spacial step
x = linspace(0,L,Nx);  
dx = x(2) - x(1); % h
C3 = -hbar^2 / (2 * me * dx^2 * e);
xmin = 0;
xmax = Nx*dx; % total distance

% Time step
C1 = 1/10;
dt = C1 * 2 * me * dx^2 / hbar; % k
C2 = e*dt/hbar;
tmax = Nt*dt; % total time

h = hbar*2*pi; %planks constant
KE = (h/wL)^2/(2*me*e);  % theoretical KE (eV)
KEj = (h/wL)^2/(2*me);  % theoretical KE (J)
vel = sqrt((2*KE)/me);

% Time of barrier impact -----
LHSdist = (Nx/2 - nx0)*dx;
inTime = LHSdist/vel;

% kappa, coefficient
kappa = (1i*hbar)/(2*me);
r = kappa*(dt/[dx]^2);
rt = kappa*(dt);

% BC
u0  = 0;
uend = 0;

rr = abs(dx - L/2);

% Potential energy function U  -------------------------------------------
U0 = 1.01*KE;
U = zeros(1,Nx);

% Define the parameters for the Woods-Saxon potential
Coul_R = L/2;  % Radius of the nucleus
Coul_a = L/10; % Diffuseness parameter
Umax = U0*e; % Joules


% Set potential energy values in the region where potential barrier is present

%U(int64(Nx/2):int64(Nx/2)+200) = U0; %barrier height
% U(int64(Nx/2):int64(Nx/2)+200) = U0.*exp(-(x(int64(Nx/2):int64(Nx/2)+200)-x(int64(Nx/2))).^2/(2*s^2)); % Gaussian potential barrier
U(int64(Nx/2):int64(Nx/2)+200) = 2*U0 ./ (1 + exp((x(int64(Nx/2):int64(Nx/2)+200)-Coul_R)/(Coul_a)));  % Coulomb shaped barrier 

% ========================================================================
% INITIAL WAVE PACKET
% ========================================================================

% Pre define solution
u = zeros(Nt, Nx);

yR(1,1:Nx) = exp(-0.5*((x-x(nx0))/s).^2).*cos(2*pi*(x-x(nx0))/wL);
yR(1,int64(Nx/2):end) = 0; % Initially set yR to be zero on the right-hand side of the barrier

yI(1,1:Nx) = exp(-0.5*((x-x(nx0))/s).^2).*sin(2*pi*(x-x(nx0))/wL);
yI(1,int64(Nx/2):end) = 0; % Initially set yI to be zero on the right-hand side of the barrier

% Normalize initial wave packet
y2 = yR.^2 + yI.^2;
A = simpson1d(y2,0,L);
yR = yR ./ sqrt(4.5375e-09); yI = yI ./ sqrt(4.5375e-09);
probD = yR.^2 + yI.^2;
yR1 = yR; yI1 = yI; yP11 = probD;

u(1,1:Nx) = yR + 1i*yI;
    
%Boundary conditions
u(2:end,1) = 0;
u(2:end,end) = 0;

u(1,1) = (u(1,1)+u0)/2;
u(1,end) = (u(1,end)+uend)/2;

% ========================================================================
% Crank-Nicholson solution of Schrodinger Equation
% ========================================================================

% Tridiagonal constants
a = -r/2 + (1i*dt/(2*hbar))*U(2:Nx-1);
b = 1 + r + (1i*dt/hbar)*U(1:Nx-2);
c = -r/2 + (1i*dt/(2*hbar))*U(2:Nx-1);

% beta
beta = zeros(1,Nx-2);
beta(1)= b(1);

% R and S 
R = zeros(Nt,Nx-2);
S = R;
R(1,1) = (r/2)*u(1,1)+(1-r)*u(1,2)+(r/2)*u(1,3)+(r/2)*u(2,1);
S(1,1) = R(1,1);


peakVal = -inf;
peakIdx = -1;
probD = zeros(1,Nx);
pkFound = false;
peakFound = false;  % initialize flag variable

figure;
count=1;
M(count) = getframe();

for n = 2:Nt-1
    count=count+1;
    for i = 2: Nx-2

        beta(i) = b(i)-a(i)*c(i)/beta(i-1);
        R(n-1,i) = (r/2)*u(n-1,i)+(1-r)*u(n-1,i+1)+(r/2)*u(n-1,i+2) ;
        S(n-1,i) = R(n-1,i) - a(i)*S(n-1,i-1)/(beta(i-1)) ;

    end

    u(n,Nx-1) = S(n-1,Nx-2)/beta(Nx-2);
    for i = Nx-2:-1:2
        u(n,i) = ((1/beta(i-1))*(S(n-1,i-1)-c(i)*u(n,i+1))) ;
    end
    R(n,1) = (r/2)*u(n,1)+(1-r)*u(n,2)+(r/2)*u(n,3)+(r/2)*u(n+1,1);
    S(n,1) = R(n,1);

    if mod(n,100)==0
        probD = abs(u(n,:).^2);

        for i=2:Nx-1
            probD(i) = abs(u(n,i))^2; 
        end
     
        threshold = 3e-55; % threshold value is found through visual inspection of the amplitude of emerged wave function

        for i = int64(Nx/2)+200:Nx-2
            if i >= int64(Nx/2)+200
                if probD(i)>probD(i-1) && probD(i) > probD(i+1) && probD(i)>threshold % Compares values of the probaility distribution at i-1 and i+1 to find a peak
                   

                    peakVal = probD(i);
                    peakIdx = i;

                    disp(peakVal)

                    outTime  = n*dt;
                    disp('time of peak emergence')
                    disp(outTime)
                    peakFound = true;

                    break

                end

            end

        end
        if peakFound
             break % if the peak is found the program ends.
        end

        subplot(3,1,1);
        plot(x,probD);
        xlim([3.85e-8 6e-8])
        title('prob distribution');


        subplot(3,1,2);
        plot(x,real(u(n,:)));
        title('real');

        subplot(3,1,3);
        plot(x,imag(u(n,:)));
        title('imag');

        M(count) = getframe();
    end
end

% Tunnelling time

T_time = outTime-inTime;
d = (round(Nx/2)+250 - round(Nx/2))*dx; % tunnel width
T_vel = d/T_time;

% ------- Dwell, Traversal and Phase-delay times --------

kappa = sqrt(2*me*(Umax-KEj))/hbar;
k0 = sqrt((Umax*2*me)/hbar^2);

Tdwell = ((me*k)/(hbar*kappa))*((2*kappa*d*(kappa^2-k^2)+k0^2*sinh(2*kappa*d))/(4*k^2*kappa^2+k0^4*sinh(kappa*d)^2));
vel_dwell = d/Tdwell;

Tphase = (me/(hbar*k*kappa))*((2*kappa*d*k^2*(kappa^2-k^2)+k0^4*sinh(2*kappa*d))/(4*k^2*kappa^2+k0^4*sinh(kappa*d)^2));
vel_phase = d/Tphase;

Tz = ((me*k0^2)/(hbar*kappa^2))*(((kappa^2-k^2)*sinh(kappa*d)^2+((kappa*d*k0^2)/2)*sinh(2*kappa*d))/(4*k^2*kappa^2 + k0^4*sinh(kappa*d)^2));

Ttrav = (Tdwell^2+Tz^2)^0.5;
vel_trav = d/Ttrav;
timeData = [T_time ; Ttrav ; Tdwell ; Tphase ];
velData = [T_vel ; vel_trav ; vel_dwell ; vel_phase];

timeTable = array2table(timeData,"RowNames",{'Calculated tunnelling time','Traversal time','Dwell time','Phase time'})

velTable = array2table(velData,"RowNames",{'Calculated tunnelling velocity','Traversal Velocity','Dwell velocity','Phase velocity'})

TProb = [(16*k^2*kappa)/(k^2+kappa^2)^2]*exp(-2*d*kappa)

Ts = -1i*((me*d)/(hbar*k));
